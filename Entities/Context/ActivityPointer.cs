//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;


namespace Entities {
    
    
    /// <summary>
    /// <para>Task performed, or to be performed, by a user. An activity is any action for which an entry can be made on a calendar.</para>
    /// <para>Display Name: Activity</para>
    /// </summary>
    [EntityLogicalName("activitypointer")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ActivityPointer : ExtendedEntity<ActivityPointerState, ActivityPointer_StatusCode> {
        
        public const string EntityLogicalName = "activitypointer";
        
        public const int EntityTypeCode = 4200;
        
        public ActivityPointer() : 
                base(EntityLogicalName) {
        }
        
        public ActivityPointer(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the activity.</para>
        /// <para>Display Name: Activity</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Additional information provided by the external application as JSON. For internal use only.</para>
        /// <para>Display Name: Activity Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        /// <summary>
        /// <para>Actual duration of the activity in minutes.</para>
        /// <para>Display Name: Actual Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Actual end time of the activity.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        /// <summary>
        /// <para>Actual start time of the activity.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how contact about the social activity originated, such as from Twitter or Facebook. This field is read-only.</para>
        /// <para>Display Name: Social Channel</para>
        /// </summary>
        [AttributeLogicalName("community")]
        public socialprofile_community? Community {
            get {
                return GetOptionSetValue<socialprofile_community>("community");
            }
            set {
                SetOptionSetValue("community", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the activity.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the activity was created.</para>
        /// <para>Display Name: Date Created</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the activitypointer.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the delivery of the activity was last attempted.</para>
        /// <para>Display Name: Date Delivery Last Attempted</para>
        /// </summary>
        [AttributeLogicalName("deliverylastattemptedon")]
        public DateTime? DeliveryLastAttemptedOn {
            get {
                return GetAttributeValue<DateTime?>("deliverylastattemptedon");
            }
        }
        
        /// <summary>
        /// <para>Priority of delivery of the activity to the email server.</para>
        /// <para>Display Name: Delivery Priority</para>
        /// </summary>
        [AttributeLogicalName("deliveryprioritycode")]
        public activitypointer_deliveryprioritycode? DeliveryPriorityCode {
            get {
                return GetOptionSetValue<activitypointer_deliveryprioritycode>("deliveryprioritycode");
            }
            set {
                SetOptionSetValue("deliveryprioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Description of the activity.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>The message id of activity which is returned from Exchange Server.</para>
        /// <para>Display Name: Exchange Item ID</para>
        /// </summary>
        [AttributeLogicalName("exchangeitemid")]
        public string ExchangeItemId {
            get {
                return GetAttributeValue<string>("exchangeitemid");
            }
            set {
                SetAttributeValue("exchangeitemid", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the activitypointer with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows the web link of Activity of type email.</para>
        /// <para>Display Name: Exchange WebLink</para>
        /// </summary>
        [AttributeLogicalName("exchangeweblink")]
        public string ExchangeWebLink {
            get {
                return GetAttributeValue<string>("exchangeweblink");
            }
            set {
                SetAttributeValue("exchangeweblink", value);
            }
        }
        
        /// <summary>
        /// <para>Type of instance of a recurring series.</para>
        /// <para>Display Name: Recurring Instance Type</para>
        /// </summary>
        [AttributeLogicalName("instancetypecode")]
        public ActivityPointer_InstanceTypeCode? InstanceTypeCode {
            get {
                return GetOptionSetValue<ActivityPointer_InstanceTypeCode>("instancetypecode");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Is Private</para>
        /// </summary>
        [AttributeLogicalName("ismapiprivate")]
        public bool? IsMapiPrivate {
            get {
                return GetAttributeValue<bool?>("ismapiprivate");
            }
            set {
                SetAttributeValue("ismapiprivate", value);
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity was created from a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Left the voice mail</para>
        /// <para>Display Name: Left Voice Mail</para>
        /// </summary>
        [AttributeLogicalName("leftvoicemail")]
        public bool? LeftVoiceMail {
            get {
                return GetAttributeValue<bool?>("leftvoicemail");
            }
            set {
                SetAttributeValue("leftvoicemail", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of user who last modified the activity.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when activity was last modified.</para>
        /// <para>Display Name: Last Updated</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the activitypointer.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the activity.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the activity.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team that owns the activity.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user that owns the activity.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Delay activity processing until</para>
        /// </summary>
        [AttributeLogicalName("postponeactivityprocessinguntil")]
        public DateTime? PostponeActivityProcessingUntil {
            get {
                return GetAttributeValue<DateTime?>("postponeactivityprocessinguntil");
            }
        }
        
        /// <summary>
        /// <para>Priority of the activity.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public ActivityPointer_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<ActivityPointer_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the activity is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the case record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the activity, specified in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
            set {
                SetAttributeValue("scheduleddurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled end time of the activity.</para>
        /// <para>Display Name: Due Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled start time of the activity.</para>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the mailbox associated with the sender of the email message.</para>
        /// <para>Display Name: Sender's Mailbox</para>
        /// </summary>
        [AttributeLogicalName("sendermailboxid")]
        public EntityReference SenderMailboxId {
            get {
                return GetAttributeValue<EntityReference>("sendermailboxid");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the activity was sent.</para>
        /// <para>Display Name: Date Sent</para>
        /// </summary>
        [AttributeLogicalName("senton")]
        public DateTime? SentOn {
            get {
                return GetAttributeValue<DateTime?>("senton");
            }
        }
        
        /// <summary>
        /// <para>Uniqueidentifier specifying the id of recurring series of an instance.</para>
        /// <para>Display Name: Series Id</para>
        /// </summary>
        [AttributeLogicalName("seriesid")]
        public Guid? SeriesId {
            get {
                return GetAttributeValue<Guid?>("seriesid");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time by which the activities are sorted.</para>
        /// <para>Display Name: Sort Date</para>
        /// </summary>
        [AttributeLogicalName("sortdate")]
        public DateTime? SortDate {
            get {
                return GetAttributeValue<DateTime?>("sortdate");
            }
            set {
                SetAttributeValue("sortdate", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Stage.</para>
        /// <para>Display Name: (Deprecated) Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the activity.</para>
        /// <para>Display Name: Activity Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public ActivityPointerState? StateCode {
            get {
                return GetOptionSetValue<ActivityPointerState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the activity.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public ActivityPointer_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<ActivityPointer_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Subject associated with the activity.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the activitypointer.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the activity.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>All activity parties associated with this activity.</para>
        /// <para>Display Name: All Activity Parties</para>
        /// </summary>
        [AttributeLogicalName("allparties")]
        public IEnumerable<ActivityParty> allparties {
            get {
                return GetEntityCollection<ActivityParty>("allparties");
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_ActivityPointers")]
        public Account Account_ActivityPointers {
            get {
                return GetRelatedEntity<Account>("Account_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Account_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_ActivityPointers")]
        public Contact Contact_ActivityPointers {
            get {
                return GetRelatedEntity<Contact>("Contact_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Contact_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("activitypointer_activity_parties")]
        public IEnumerable<ActivityParty> activitypointer_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("activitypointer_activity_parties", null);
            }
            set {
                SetRelatedEntities("activitypointer_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_activitypointer")]
        public BusinessUnit business_unit_activitypointer {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_activitypointer", null);
            }
            set {
                SetRelatedEntity("business_unit_activitypointer", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_activitypointer_createdby")]
        public SystemUser lk_activitypointer_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_activitypointer_createdby", null);
            }
            set {
                SetRelatedEntity("lk_activitypointer_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_activitypointer_createdonbehalfby")]
        public SystemUser lk_activitypointer_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_activitypointer_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_activitypointer_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_activitypointer_modifiedby")]
        public SystemUser lk_activitypointer_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_activitypointer_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_activitypointer_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_activitypointer_modifiedonbehalfby")]
        public SystemUser lk_activitypointer_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_activitypointer_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_activitypointer_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_activity")]
        public Team team_activity {
            get {
                return GetRelatedEntity<Team>("team_activity", null);
            }
            set {
                SetRelatedEntity("team_activity", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_activity")]
        public SystemUser user_activity {
            get {
                return GetRelatedEntity<SystemUser>("user_activity", null);
            }
            set {
                SetRelatedEntity("user_activity", null, value);
            }
        }
        
        public static ActivityPointer Retrieve(IOrganizationService service, Guid id, params Expression<Func<ActivityPointer,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [DataContract()]
    public enum ActivityPointer_StatusCode {
        
        [EnumMember()]
        Open = 1,
        
        [EnumMember()]
        Completed = 2,
        
        [EnumMember()]
        Canceled = 3,
        
        [EnumMember()]
        Scheduled = 4,
    }
    
    [DataContract()]
    public enum ActivityPointer_InstanceTypeCode {
        
        [EnumMember()]
        NotRecurring = 0,
        
        [EnumMember()]
        RecurringMaster = 1,
        
        [EnumMember()]
        RecurringInstance = 2,
        
        [EnumMember()]
        RecurringException = 3,
        
        [EnumMember()]
        RecurringFutureException = 4,
    }
    
    [DataContract()]
    public enum ActivityPointer_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum ActivityPointerState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
        
        [EnumMember()]
        Scheduled = 3,
    }
}
