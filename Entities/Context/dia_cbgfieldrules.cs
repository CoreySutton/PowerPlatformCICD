//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;


namespace Entities {
    
    
    /// <summary>
    /// <para>Display Name: CBG field rules</para>
    /// </summary>
    [EntityLogicalName("dia_cbgfieldrules")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dia_cbgfieldrules : ExtendedEntity<dia_cbgfieldrulesState, dia_cbgfieldrules_statuscode> {
        
        public const string EntityLogicalName = "dia_cbgfieldrules";
        
        public const int EntityTypeCode = 10377;
        
        public dia_cbgfieldrules() : 
                base(EntityLogicalName) {
        }
        
        public dia_cbgfieldrules(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dia_name");
            }
        }
        
        [AttributeLogicalName("dia_cbgfieldrulesid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dia_cbgfieldrulesid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: CBG Field Rules</para>
        /// </summary>
        [AttributeLogicalName("dia_cbgfieldrulesid")]
        public Guid? dia_cbgfieldrulesId {
            get {
                return GetAttributeValue<Guid?>("dia_cbgfieldrulesid");
            }
            set {
                SetId("dia_cbgfieldrulesid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Entity Form</para>
        /// </summary>
        [AttributeLogicalName("dia_entityform")]
        public EntityReference dia_EntityForm {
            get {
                return GetAttributeValue<EntityReference>("dia_entityform");
            }
            set {
                SetAttributeValue("dia_entityform", value);
            }
        }
        
        /// <summary>
        /// <para>The name of the field.</para>
        /// <para>Display Name: Field</para>
        /// </summary>
        [AttributeLogicalName("dia_name")]
        public string dia_name {
            get {
                return GetAttributeValue<string>("dia_name");
            }
            set {
                SetAttributeValue("dia_name", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: New Label</para>
        /// </summary>
        [AttributeLogicalName("diap_newlabel")]
        public string diap_NewLabel {
            get {
                return GetAttributeValue<string>("diap_newlabel");
            }
            set {
                SetAttributeValue("diap_newlabel", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: New Placeholder Text</para>
        /// </summary>
        [AttributeLogicalName("diap_newplaceholdertext")]
        public string diap_NewPlaceholderText {
            get {
                return GetAttributeValue<string>("diap_newplaceholdertext");
            }
            set {
                SetAttributeValue("diap_newplaceholdertext", value);
            }
        }
        
        /// <summary>
        /// <para>The value (if any) to set the field to on hiding the field / section.</para>
        /// <para>Display Name: On Hide Value</para>
        /// </summary>
        [AttributeLogicalName("diap_onhidevalue")]
        public string diap_OnHideValue {
            get {
                return GetAttributeValue<string>("diap_onhidevalue");
            }
            set {
                SetAttributeValue("diap_onhidevalue", value);
            }
        }
        
        /// <summary>
        /// <para>The value (if any) to set the field to on showing the field / section.</para>
        /// <para>Display Name: On Show Value</para>
        /// </summary>
        [AttributeLogicalName("diap_onshowvalue")]
        public string diap_OnShowValue {
            get {
                return GetAttributeValue<string>("diap_onshowvalue");
            }
            set {
                SetAttributeValue("diap_onshowvalue", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Rule Type</para>
        /// </summary>
        [AttributeLogicalName("diap_ruletype")]
        public dia_cbgfieldrules_diap_RuleType? diap_RuleType {
            get {
                return GetOptionSetValue<dia_cbgfieldrules_diap_RuleType>("diap_ruletype");
            }
            set {
                SetOptionSetValue("diap_ruletype", value);
            }
        }
        
        /// <summary>
        /// <para>The value of the toggle field to determine when to show the other configured field.</para>
        /// <para>Display Name: Apply when Toggle Field value is</para>
        /// </summary>
        [AttributeLogicalName("diap_showwhentogglefieldvalueis")]
        public string diap_ShowwhenToggleFieldvalueis {
            get {
                return GetAttributeValue<string>("diap_showwhentogglefieldvalueis");
            }
            set {
                SetAttributeValue("diap_showwhentogglefieldvalueis", value);
            }
        }
        
        /// <summary>
        /// <para>The id of the field used to show / hide the other configured field.</para>
        /// <para>Display Name: Toggle Field Id</para>
        /// </summary>
        [AttributeLogicalName("diap_togglefieldid")]
        public string diap_ToggleFieldId {
            get {
                return GetAttributeValue<string>("diap_togglefieldid");
            }
            set {
                SetAttributeValue("diap_togglefieldid", value);
            }
        }
        
        /// <summary>
        /// <para>The id of the section where any field set to the value specified in the "Apply when Toggle Field Value is" field will trigger the show / hide. This can be used instead of the Toggle Field Id.</para>
        /// <para>Display Name: Toggle Section Id</para>
        /// </summary>
        [AttributeLogicalName("diap_togglesectionid")]
        public string diap_ToggleSectionId {
            get {
                return GetAttributeValue<string>("diap_togglesectionid");
            }
            set {
                SetAttributeValue("diap_togglesectionid", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the CBG Field Rules</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dia_cbgfieldrulesState? statecode {
            get {
                return GetOptionSetValue<dia_cbgfieldrulesState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the CBG Field Rules</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dia_cbgfieldrules_statuscode? statuscode {
            get {
                return GetOptionSetValue<dia_cbgfieldrules_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        public static dia_cbgfieldrules Retrieve(IOrganizationService service, Guid id, params Expression<Func<dia_cbgfieldrules,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [DataContract()]
    public enum dia_cbgfieldrules_diap_RuleType {
        
        [EnumMember()]
        ShowHide = 504120000,
        
        [EnumMember()]
        LabelChange = 504120001,
    }
    
    [DataContract()]
    public enum dia_cbgfieldrulesState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dia_cbgfieldrules_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
}
